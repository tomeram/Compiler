/* The following code was generated by JFlex 1.6.0 */

package IC.Parser;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>D:/Java/workspace/Compiler/PA1/src/IC/Parser/IC.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\7\1\5\1\0\1\7\1\6\22\0\1\63\1\22\1\12"+
                    "\2\62\1\23\1\30\1\62\1\57\1\60\1\11\1\24\1\13\1\21"+
                    "\1\20\1\10\1\1\11\1\1\62\1\32\1\25\1\27\1\26\2\62"+
                    "\32\4\1\14\1\61\1\15\1\62\1\3\1\62\1\37\1\52\1\50"+
                    "\1\55\1\41\1\36\1\44\1\45\1\47\1\2\1\53\1\35\1\2"+
                    "\1\33\1\51\2\2\1\43\1\40\1\42\1\34\1\54\1\46\1\56"+
                    "\2\2\1\16\1\31\1\17\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
                    "\1\20\1\21\1\22\1\23\1\24\2\0\1\25\14\2"+
                    "\1\26\1\27\1\30\1\31\1\32\1\4\1\0\1\33"+
                    "\1\34\1\35\1\36\1\37\1\40\14\2\1\41\5\2"+
                    "\1\42\1\43\1\44\1\45\1\0\1\2\1\46\12\2"+
                    "\1\47\5\2\1\50\4\2\1\51\1\2\1\52\1\53"+
                    "\6\2\1\54\1\2\1\55\4\2\1\56\1\57\1\2"+
                    "\1\60\1\2\1\61\1\62\1\63\1\2\1\64\2\2"+
                    "\1\65\1\2\1\66\1\67";

    private static int [] zzUnpackAction() {
        int [] result = new int[130];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
                    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
                    "\0\u0104\0\u01a0\0\u0104\0\u0104\0\u01d4\0\u0208\0\u023c\0\u0270"+
                    "\0\u02a4\0\u0104\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
                    "\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0104\0\u0104"+
                    "\0\u0104\0\u0104\0\u0548\0\u057c\0\u05b0\0\u0104\0\u0104\0\u0104"+
                    "\0\u0104\0\u0104\0\u0104\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
                    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\234"+
                    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0104\0\u0104\0\u0104"+
                    "\0\u0104\0\u0958\0\u098c\0\234\0\u09c0\0\u09f4\0\u0a28\0\u0a5c"+
                    "\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\234\0\u0bc8"+
                    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\234\0\u0ccc\0\u0d00\0\u0d34"+
                    "\0\u0d68\0\234\0\u0d9c\0\234\0\234\0\u0dd0\0\u0e04\0\u0e38"+
                    "\0\u0e6c\0\u0ea0\0\u0ed4\0\234\0\u0f08\0\234\0\u0f3c\0\u0f70"+
                    "\0\u0fa4\0\u0fd8\0\234\0\234\0\u100c\0\234\0\u1040\0\234"+
                    "\0\234\0\234\0\u1074\0\234\0\u10a8\0\u10dc\0\234\0\u1110"+
                    "\0\234\0\234";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[130];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\0\1\3\1\4\1\0\1\5\1\6\1\7\1\6"+
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
                    "\1\30\1\31\1\32\1\33\1\4\1\34\1\35\1\4"+
                    "\1\36\1\37\1\40\1\41\2\4\1\42\1\43\1\44"+
                    "\1\4\1\45\1\4\1\46\2\4\1\47\1\50\2\0"+
                    "\1\6\1\0\4\51\3\0\2\51\1\52\46\51\1\53"+
                    "\2\51\1\0\1\3\63\0\4\4\26\0\24\4\6\0"+
                    "\4\5\26\0\24\5\76\0\1\6\66\0\1\54\1\55"+
                    "\101\0\1\56\63\0\1\57\63\0\1\60\63\0\1\61"+
                    "\64\0\1\62\64\0\1\63\33\0\4\4\26\0\1\4"+
                    "\1\64\4\4\1\65\15\4\6\0\4\4\26\0\6\4"+
                    "\1\66\15\4\6\0\4\4\26\0\4\4\1\67\17\4"+
                    "\6\0\4\4\26\0\7\4\1\70\14\4\6\0\4\4"+
                    "\26\0\2\4\1\71\20\4\1\72\6\0\4\4\26\0"+
                    "\10\4\1\73\1\4\1\74\11\4\6\0\4\4\26\0"+
                    "\6\4\1\75\15\4\6\0\4\4\26\0\12\4\1\76"+
                    "\11\4\6\0\4\4\26\0\1\77\2\4\1\100\20\4"+
                    "\6\0\4\4\26\0\2\4\1\101\13\4\1\102\5\4"+
                    "\6\0\4\4\26\0\10\4\1\103\5\4\1\104\5\4"+
                    "\6\0\4\4\26\0\16\4\1\105\5\4\17\0\1\106"+
                    "\20\0\1\107\6\0\1\110\16\0\1\111\2\0\5\54"+
                    "\1\6\1\7\55\54\11\55\1\112\52\55\1\0\4\4"+
                    "\26\0\2\4\1\113\21\4\6\0\4\4\26\0\13\4"+
                    "\1\114\10\4\6\0\4\4\26\0\1\115\23\4\6\0"+
                    "\4\4\26\0\2\4\1\116\21\4\6\0\4\4\26\0"+
                    "\4\4\1\117\3\4\1\120\13\4\6\0\4\4\26\0"+
                    "\5\4\1\121\16\4\6\0\4\4\26\0\7\4\1\122"+
                    "\14\4\6\0\4\4\26\0\1\4\1\123\22\4\6\0"+
                    "\4\4\26\0\14\4\1\124\7\4\6\0\4\4\26\0"+
                    "\7\4\1\125\14\4\6\0\4\4\26\0\14\4\1\126"+
                    "\7\4\6\0\4\4\26\0\7\4\1\127\14\4\6\0"+
                    "\4\4\26\0\4\4\1\130\17\4\6\0\4\4\26\0"+
                    "\1\131\23\4\6\0\4\4\26\0\6\4\1\132\15\4"+
                    "\6\0\4\4\26\0\16\4\1\133\5\4\6\0\4\4"+
                    "\26\0\14\4\1\134\7\4\5\0\10\55\1\6\1\112"+
                    "\52\55\1\0\4\4\26\0\2\4\1\135\21\4\6\0"+
                    "\4\4\26\0\11\4\1\136\12\4\6\0\4\4\26\0"+
                    "\5\4\1\137\16\4\6\0\4\4\26\0\7\4\1\140"+
                    "\14\4\6\0\4\4\26\0\14\4\1\141\7\4\6\0"+
                    "\4\4\26\0\6\4\1\142\15\4\6\0\4\4\26\0"+
                    "\6\4\1\143\15\4\6\0\4\4\26\0\6\4\1\144"+
                    "\15\4\6\0\4\4\26\0\5\4\1\145\16\4\6\0"+
                    "\4\4\26\0\1\4\1\146\22\4\6\0\4\4\26\0"+
                    "\2\4\1\147\21\4\6\0\4\4\26\0\5\4\1\150"+
                    "\16\4\6\0\4\4\26\0\7\4\1\151\14\4\6\0"+
                    "\4\4\26\0\4\4\1\152\17\4\6\0\4\4\26\0"+
                    "\2\4\1\153\21\4\6\0\4\4\26\0\22\4\1\154"+
                    "\1\4\6\0\4\4\26\0\7\4\1\155\14\4\6\0"+
                    "\4\4\26\0\6\4\1\156\15\4\6\0\4\4\26\0"+
                    "\14\4\1\157\7\4\6\0\4\4\26\0\1\160\23\4"+
                    "\6\0\4\4\26\0\1\161\23\4\6\0\4\4\26\0"+
                    "\10\4\1\162\13\4\6\0\4\4\26\0\6\4\1\163"+
                    "\15\4\6\0\4\4\26\0\5\4\1\164\16\4\6\0"+
                    "\4\4\26\0\14\4\1\165\7\4\6\0\4\4\26\0"+
                    "\20\4\1\166\3\4\6\0\4\4\26\0\6\4\1\167"+
                    "\15\4\6\0\4\4\26\0\12\4\1\170\11\4\6\0"+
                    "\4\4\26\0\15\4\1\171\6\4\6\0\4\4\26\0"+
                    "\11\4\1\172\12\4\6\0\4\4\26\0\22\4\1\173"+
                    "\1\4\6\0\4\4\26\0\1\174\23\4\6\0\4\4"+
                    "\26\0\1\175\23\4\6\0\4\4\26\0\4\4\1\176"+
                    "\17\4\6\0\4\4\26\0\5\4\1\177\16\4\6\0"+
                    "\4\4\26\0\1\4\1\200\22\4\6\0\4\4\26\0"+
                    "\1\201\23\4\6\0\4\4\26\0\6\4\1\202\15\4"+
                    "\5\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[4420];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\3\1\1\11\2\1\11\11\1\1\2\11\3\1"+
                    "\2\0\1\11\14\1\4\11\2\1\1\0\6\11\22\1"+
                    "\4\11\1\0\70\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[130];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuffer string = new StringBuffer();
    int stringStart = 0;

    private Token newToken(int sym, String tag) {
        return new Token(sym, yyline,yycolumn,tag,yytext());
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 164) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) throws LexicalError {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new LexicalError(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  throws LexicalError {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public Token next_token() throws java.io.IOException, LexicalError {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                { return newToken(sym.NUM,"INTEGER");
                }
                case 56: break;
                case 2:
                { return newToken(sym.ID,"ID");
                }
                case 57: break;
                case 3:
                { return newToken(sym.CLASS_ID,"CLASS_ID");
                }
                case 58: break;
                case 4:
                { /* ignore */
                }
                case 59: break;
                case 5:
                { return newToken(sym.DIV,"/");
                }
                case 60: break;
                case 6:
                { return newToken(sym.MULTI,"*");
                }
                case 61: break;
                case 7:
                { string.setLength(0); stringStart = yycolumn; yybegin(STRING);
                }
                case 62: break;
                case 8:
                { return newToken(sym.COL,",");
                }
                case 63: break;
                case 9:
                { return newToken(sym.LSP,"[");
                }
                case 64: break;
                case 10:
                { return newToken(sym.RSP,"]");
                }
                case 65: break;
                case 11:
                { return newToken(sym.LCP,"{");
                }
                case 66: break;
                case 12:
                { return newToken(sym.RCP,"}");
                }
                case 67: break;
                case 13:
                { return newToken(sym.DOT,".");
                }
                case 68: break;
                case 14:
                { return newToken(sym.MINUS,"-");
                }
                case 69: break;
                case 15:
                { return newToken(sym.EXCLAM,"!");
                }
                case 70: break;
                case 16:
                { return newToken(sym.MOD,"%");
                }
                case 71: break;
                case 17:
                { return newToken(sym.PLUS,"+");
                }
                case 72: break;
                case 18:
                { return newToken(sym.LT,"<");
                }
                case 73: break;
                case 19:
                { return newToken(sym.GT,">");
                }
                case 74: break;
                case 20:
                { return newToken(sym.EQ,"=");
                }
                case 75: break;
                case 21:
                { return newToken(sym.SEMICOL,";");
                }
                case 76: break;
                case 22:
                { return newToken(sym.LP,"(");
                }
                case 77: break;
                case 23:
                { return newToken(sym.RP,")");
                }
                case 78: break;
                case 24:
                { string.append(yytext());
                }
                case 79: break;
                case 25:
                { yybegin(YYINITIAL);
                    return new Token(sym.STRING_LITERAL, yyline,stringStart,"STRING", string.toString());
                }
                case 80: break;
                case 26:
                { throw new LexicalError("error");
                }
                case 81: break;
                case 27:
                { return newToken(sym.NE,"!=");
                }
                case 82: break;
                case 28:
                { return newToken(sym.LE,"<=");
                }
                case 83: break;
                case 29:
                { return newToken(sym.GE,">=");
                }
                case 84: break;
                case 30:
                { return newToken(sym.EQEQ,"==");
                }
                case 85: break;
                case 31:
                { return newToken(sym.AND,"&&");
                }
                case 86: break;
                case 32:
                { return newToken(sym.OR,"||");
                }
                case 87: break;
                case 33:
                { return newToken(sym.IF,"if");
                }
                case 88: break;
                case 34:
                { string.append("\\\"");
                }
                case 89: break;
                case 35:
                { string.append("\\n");
                }
                case 90: break;
                case 36:
                { string.append("\\t");
                }
                case 91: break;
                case 37:
                { string.append("\\\\");
                }
                case 92: break;
                case 38:
                { return newToken(sym.NEW,"new");
                }
                case 93: break;
                case 39:
                { return newToken(sym.INT,"int");
                }
                case 94: break;
                case 40:
                { return newToken(sym.NULL,"null");
                }
                case 95: break;
                case 41:
                { return newToken(sym.ELSE,"else");
                }
                case 96: break;
                case 42:
                { return newToken(sym.TRUE,"true");
                }
                case 97: break;
                case 43:
                { return newToken(sym.THIS,"this");
                }
                case 98: break;
                case 44:
                { return newToken(sym.VOID,"void");
                }
                case 99: break;
                case 45:
                { return newToken(sym.FALSE,"false");
                }
                case 100: break;
                case 46:
                { return newToken(sym.WHILE,"while");
                }
                case 101: break;
                case 47:
                { return newToken(sym.CLASS,"class");
                }
                case 102: break;
                case 48:
                { return newToken(sym.BREAK,"break");
                }
                case 103: break;
                case 49:
                { return newToken(sym.LENGTH,"length");
                }
                case 104: break;
                case 50:
                { return newToken(sym.STATIC,"static");
                }
                case 105: break;
                case 51:
                { return newToken(sym.STRING,"string");
                }
                case 106: break;
                case 52:
                { return newToken(sym.RETURN,"return");
                }
                case 107: break;
                case 53:
                { return newToken(sym.EXTENDS,"extends");
                }
                case 108: break;
                case 54:
                { return newToken(sym.BOOLEAN,"boolean");
                }
                case 109: break;
                case 55:
                { return newToken(sym.CONTINUE,"continue");
                }
                case 110: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                return newToken(sym.EOF,"EOF");
                            }
                            case 131: break;
                            default:
                            { 	if (yystate() == YYINITIAL) newToken(sym.EOF,"EOF"); else throw new LexicalError("errorEOF");
                            }
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
