
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package IC.Parser;

import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.Symbol;
import IC.AST.*;
import IC.DataTypes;
import IC.BinaryOps;
import IC.UnaryOps;
import IC.LiteralTypes;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\127\000\002\002\003\000\002\002\004\000\002\003" +
                            "\004\000\002\003\002\000\002\004\007\000\002\004\011" +
                            "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
                            "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
                            "\012\004\000\002\012\003\000\002\011\012\000\002\011" +
                            "\011\000\002\011\012\000\002\011\011\000\002\016\003" +
                            "\000\002\016\005\000\002\016\002\000\002\017\004\000" +
                            "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
                            "\010\003\000\002\010\005\000\002\022\003\000\002\022" +
                            "\003\000\002\025\010\000\002\026\010\000\002\026\006" +
                            "\000\002\020\003\000\002\020\005\000\002\020\006\000" +
                            "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
                            "\027\005\000\002\027\005\000\002\030\005\000\002\030" +
                            "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
                            "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
                            "\002\031\004\000\002\031\004\000\002\023\003\000\002" +
                            "\023\002\000\002\024\003\000\002\024\005\000\002\015" +
                            "\003\000\002\015\004\000\002\013\006\000\002\013\004" +
                            "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
                            "\002\013\007\000\002\013\004\000\002\013\004\000\002" +
                            "\013\005\000\002\013\004\000\002\013\005\000\002\013" +
                            "\007\000\002\014\007\000\002\014\011\000\002\021\003" +
                            "\000\002\021\003\000\002\021\003\000\002\021\006\000" +
                            "\002\021\007\000\002\021\005\000\002\021\003\000\002" +
                            "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
                            "\003\000\002\021\005\000\002\032\003\000\002\032\003" +
                            "\000\002\032\003\000\002\033\003\000\002\033\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\260\000\006\002\ufffe\006\ufffe\001\002\000\006\002" +
                            "\001\006\010\001\002\000\004\002\006\001\002\000\004" +
                            "\002\000\001\002\000\006\002\uffff\006\uffff\001\002\000" +
                            "\004\022\011\001\002\000\006\015\013\027\012\001\002" +
                            "\000\004\022\257\001\002\000\020\007\ufff9\010\ufff9\011" +
                            "\ufff9\016\ufff9\020\ufff9\021\ufff9\022\ufff9\001\002\000\020" +
                            "\007\020\010\023\011\025\016\016\020\017\021\022\022" +
                            "\024\001\002\000\020\007\ufff4\010\ufff4\011\ufff4\016\ufff4" +
                            "\020\ufff4\021\ufff4\022\ufff4\001\002\000\006\002\ufffd\006" +
                            "\ufffd\001\002\000\006\013\uffeb\023\uffeb\001\002\000\014" +
                            "\010\023\011\025\020\017\021\022\022\024\001\002\000" +
                            "\020\007\ufffa\010\ufffa\011\ufffa\016\ufffa\020\ufffa\021\ufffa" +
                            "\022\ufffa\001\002\000\006\013\uffea\023\uffea\001\002\000" +
                            "\004\023\244\001\002\000\006\013\uffe8\023\uffe8\001\002" +
                            "\000\006\013\uffe9\023\uffe9\001\002\000\006\013\031\023" +
                            "\030\001\002\000\020\007\ufffb\010\ufffb\011\ufffb\016\ufffb" +
                            "\020\ufffb\021\ufffb\022\ufffb\001\002\000\010\004\036\012" +
                            "\035\017\ufff7\001\002\000\004\014\034\001\002\000\004" +
                            "\017\033\001\002\000\020\007\ufff8\010\ufff8\011\ufff8\016" +
                            "\ufff8\020\ufff8\021\ufff8\022\ufff8\001\002\000\006\013\uffe7" +
                            "\023\uffe7\001\002\000\004\023\242\001\002\000\016\005" +
                            "\uffed\011\025\012\uffed\020\017\021\022\022\024\001\002" +
                            "\000\006\013\031\023\241\001\002\000\006\005\uffef\012" +
                            "\uffef\001\002\000\006\005\043\012\042\001\002\000\012" +
                            "\011\025\020\017\021\022\022\024\001\002\000\004\015" +
                            "\044\001\002\000\056\004\054\011\025\015\062\016\101" +
                            "\020\017\021\022\022\100\023\060\024\055\025\056\030" +
                            "\063\031\077\032\070\033\051\034\057\035\065\037\064" +
                            "\040\103\041\067\043\052\044\050\062\046\001\002\000" +
                            "\042\013\uffba\017\237\042\uffba\043\uffba\045\uffba\046\uffba" +
                            "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
                            "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\050\005\uffab" +
                            "\012\uffab\013\uffab\014\uffab\017\uffab\042\uffab\043\uffab\045" +
                            "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
                            "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\001\002\000" +
                            "\050\005\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6\042\uffe6" +
                            "\043\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
                            "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
                            "\001\002\000\032\004\054\022\114\023\060\024\055\034" +
                            "\057\035\065\037\064\040\103\041\067\043\052\044\050" +
                            "\062\046\001\002\000\004\017\235\001\002\000\032\004" +
                            "\054\022\114\023\060\024\055\034\057\035\065\037\064" +
                            "\040\103\041\067\043\052\044\050\062\046\001\002\000" +
                            "\042\013\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb" +
                            "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
                            "\uffbb\057\uffbb\060\uffbb\061\231\001\002\000\032\004\054" +
                            "\022\114\023\060\024\055\034\057\035\065\037\064\040" +
                            "\103\041\067\043\052\044\050\062\046\001\002\000\050" +
                            "\005\uffac\012\uffac\013\uffac\014\uffac\017\uffac\042\uffac\043" +
                            "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
                            "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\001" +
                            "\002\000\004\004\221\001\002\000\050\005\uffb9\012\uffb9" +
                            "\013\uffb9\014\uffb9\017\uffb9\042\uffb9\043\uffb9\045\uffb9\046" +
                            "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
                            "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\054\004" +
                            "\216\005\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\042\uffe1" +
                            "\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
                            "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
                            "\061\uffe1\001\002\000\050\005\uffb2\012\uffb2\013\uffb2\014" +
                            "\uffb2\017\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2" +
                            "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
                            "\uffb2\057\uffb2\060\uffb2\001\002\000\056\004\054\011\025" +
                            "\015\062\016\214\020\017\021\022\022\100\023\060\024" +
                            "\055\025\056\030\063\031\077\032\070\033\051\034\057" +
                            "\035\065\037\064\040\103\041\067\043\052\044\050\062" +
                            "\046\001\002\000\034\004\054\017\211\022\114\023\060" +
                            "\024\055\034\057\035\065\037\064\040\103\041\067\043" +
                            "\052\044\050\062\046\001\002\000\050\005\uffaf\012\uffaf" +
                            "\013\uffaf\014\uffaf\017\uffaf\042\uffaf\043\uffaf\045\uffaf\046" +
                            "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
                            "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\001\002\000\012\011" +
                            "\025\020\017\021\022\022\202\001\002\000\050\005\uffb5" +
                            "\012\uffb5\013\uffb5\014\uffb5\017\uffb5\042\uffb5\043\uffb5\045" +
                            "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
                            "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000" +
                            "\050\005\uffad\012\uffad\013\uffad\014\uffad\017\uffad\042\uffad" +
                            "\043\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
                            "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
                            "\001\002\000\004\017\200\001\002\000\050\005\uffb1\012" +
                            "\uffb1\013\uffb1\014\uffb1\017\uffb1\042\uffb1\043\uffb1\045\uffb1" +
                            "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
                            "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\056" +
                            "\004\054\011\025\015\062\016\176\020\017\021\022\022" +
                            "\100\023\060\024\055\025\056\030\063\031\077\032\070" +
                            "\033\051\034\057\035\065\037\064\040\103\041\067\043" +
                            "\052\044\050\062\046\001\002\000\060\004\uffc5\011\uffc5" +
                            "\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
                            "\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
                            "\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044" +
                            "\uffc5\062\uffc5\001\002\000\050\005\uffe5\012\uffe5\013\uffe5" +
                            "\014\uffe5\017\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047" +
                            "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
                            "\056\uffe5\057\uffe5\060\uffe5\001\002\000\050\005\uffb3\012" +
                            "\uffb3\013\uffb3\014\uffb3\017\uffb3\042\uffb3\043\uffb3\045\uffb3" +
                            "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
                            "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\050" +
                            "\005\uffb4\012\uffb4\013\uffb4\014\uffb4\017\uffb4\042\uffb4\043" +
                            "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
                            "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001" +
                            "\002\000\004\004\172\001\002\000\010\013\uffe8\023\uffe8" +
                            "\042\115\001\002\000\020\007\ufff2\010\ufff2\011\ufff2\016" +
                            "\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\040\013\131" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\050\005\uffae\012\uffae\013\uffae\014" +
                            "\uffae\017\uffae\042\uffae\043\uffae\045\uffae\046\uffae\047\uffae" +
                            "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
                            "\uffae\057\uffae\060\uffae\001\002\000\056\004\uffcb\011\uffcb" +
                            "\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
                            "\uffcb\025\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
                            "\035\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\062" +
                            "\uffcb\001\002\000\006\013\031\023\106\001\002\000\006" +
                            "\017\110\061\107\001\002\000\032\004\054\022\114\023" +
                            "\060\024\055\034\057\035\065\037\064\040\103\041\067" +
                            "\043\052\044\050\062\046\001\002\000\060\004\uffbf\011" +
                            "\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
                            "\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
                            "\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
                            "\044\uffbf\062\uffbf\001\002\000\050\005\uffbb\012\uffbb\013" +
                            "\uffbb\014\uffbb\017\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb" +
                            "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
                            "\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000\042\013\131" +
                            "\017\171\042\140\043\126\045\132\046\141\047\133\050" +
                            "\135\051\143\052\137\053\136\054\134\055\130\056\142" +
                            "\057\127\060\144\001\002\000\050\005\uffba\012\uffba\013" +
                            "\uffba\014\uffba\017\uffba\042\uffba\043\uffba\045\uffba\046\uffba" +
                            "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
                            "\uffba\056\uffba\057\uffba\060\uffba\001\002\000\004\042\115" +
                            "\001\002\000\004\023\116\001\002\000\004\004\117\001" +
                            "\002\000\034\004\054\005\uffce\022\114\023\060\024\055" +
                            "\034\057\035\065\037\064\040\103\041\067\043\052\044" +
                            "\050\062\046\001\002\000\044\005\uffcd\012\uffcd\013\131" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\006\005\uffcf\012\124\001\002\000" +
                            "\004\005\123\001\002\000\050\005\uffe4\012\uffe4\013\uffe4" +
                            "\014\uffe4\017\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047" +
                            "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
                            "\056\uffe4\057\uffe4\060\uffe4\001\002\000\032\004\054\022" +
                            "\114\023\060\024\055\034\057\035\065\037\064\040\103" +
                            "\041\067\043\052\044\050\062\046\001\002\000\044\005" +
                            "\uffcc\012\uffcc\013\131\042\140\043\126\045\132\046\141" +
                            "\047\133\050\135\051\143\052\137\053\136\054\134\055" +
                            "\130\056\142\057\127\060\144\001\002\000\032\004\054" +
                            "\022\114\023\060\024\055\034\057\035\065\037\064\040" +
                            "\103\041\067\043\052\044\050\062\046\001\002\000\032" +
                            "\004\054\022\114\023\060\024\055\034\057\035\065\037" +
                            "\064\040\103\041\067\043\052\044\050\062\046\001\002" +
                            "\000\032\004\054\022\114\023\060\024\055\034\057\035" +
                            "\065\037\064\040\103\041\067\043\052\044\050\062\046" +
                            "\001\002\000\032\004\054\022\114\023\060\024\055\034" +
                            "\057\035\065\037\064\040\103\041\067\043\052\044\050" +
                            "\062\046\001\002\000\032\004\054\022\114\023\060\024" +
                            "\055\034\057\035\065\037\064\040\103\041\067\043\052" +
                            "\044\050\062\046\001\002\000\032\004\054\022\114\023" +
                            "\060\024\055\034\057\035\065\037\064\040\103\041\067" +
                            "\043\052\044\050\062\046\001\002\000\032\004\054\022" +
                            "\114\023\060\024\055\034\057\035\065\037\064\040\103" +
                            "\041\067\043\052\044\050\062\046\001\002\000\032\004" +
                            "\054\022\114\023\060\024\055\034\057\035\065\037\064" +
                            "\040\103\041\067\043\052\044\050\062\046\001\002\000" +
                            "\032\004\054\022\114\023\060\024\055\034\057\035\065" +
                            "\037\064\040\103\041\067\043\052\044\050\062\046\001" +
                            "\002\000\032\004\054\022\114\023\060\024\055\034\057" +
                            "\035\065\037\064\040\103\041\067\043\052\044\050\062" +
                            "\046\001\002\000\006\023\151\036\152\001\002\000\032" +
                            "\004\054\022\114\023\060\024\055\034\057\035\065\037" +
                            "\064\040\103\041\067\043\052\044\050\062\046\001\002" +
                            "\000\032\004\054\022\114\023\060\024\055\034\057\035" +
                            "\065\037\064\040\103\041\067\043\052\044\050\062\046" +
                            "\001\002\000\032\004\054\022\114\023\060\024\055\034" +
                            "\057\035\065\037\064\040\103\041\067\043\052\044\050" +
                            "\062\046\001\002\000\032\004\054\022\114\023\060\024" +
                            "\055\034\057\035\065\037\064\040\103\041\067\043\052" +
                            "\044\050\062\046\001\002\000\050\005\uffd8\012\uffd8\013" +
                            "\131\014\uffd8\017\uffd8\042\140\043\126\045\132\046\141" +
                            "\047\133\050\135\051\143\052\137\053\136\054\134\055" +
                            "\130\056\142\057\127\060\uffd8\001\002\000\050\005\uffd7" +
                            "\012\uffd7\013\131\014\uffd7\017\uffd7\042\140\043\126\045" +
                            "\132\046\141\047\133\050\135\051\uffd7\052\uffd7\053\uffd7" +
                            "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\001\002\000" +
                            "\050\005\uffd2\012\uffd2\013\131\014\uffd2\017\uffd2\042\140" +
                            "\043\126\045\132\046\141\047\133\050\135\051\143\052" +
                            "\137\053\136\054\134\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
                            "\001\002\000\050\005\uffdd\012\uffdd\013\131\014\uffdd\017" +
                            "\uffdd\042\140\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
                            "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
                            "\uffdd\060\uffdd\001\002\000\054\004\153\005\uffe0\012\uffe0" +
                            "\013\uffe0\014\uffe0\017\uffe0\042\uffe0\043\uffe0\045\uffe0\046" +
                            "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
                            "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000" +
                            "\050\005\uffb6\012\uffb6\013\uffb6\014\uffb6\017\uffb6\042\uffb6" +
                            "\043\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
                            "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
                            "\001\002\000\034\004\054\005\uffce\022\114\023\060\024" +
                            "\055\034\057\035\065\037\064\040\103\041\067\043\052" +
                            "\044\050\062\046\001\002\000\004\005\155\001\002\000" +
                            "\050\005\uffe3\012\uffe3\013\uffe3\014\uffe3\017\uffe3\042\uffe3" +
                            "\043\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
                            "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
                            "\001\002\000\050\005\uffd5\012\uffd5\013\131\014\uffd5\017" +
                            "\uffd5\042\140\043\126\045\132\046\141\047\133\050\135" +
                            "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
                            "\uffd5\060\uffd5\001\002\000\050\005\uffd6\012\uffd6\013\131" +
                            "\014\uffd6\017\uffd6\042\140\043\126\045\132\046\141\047" +
                            "\133\050\135\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
                            "\056\uffd6\057\uffd6\060\uffd6\001\002\000\050\005\uffdb\012" +
                            "\uffdb\013\131\014\uffdb\017\uffdb\042\140\043\uffdb\045\132" +
                            "\046\141\047\133\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
                            "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002\000\050" +
                            "\005\uffd4\012\uffd4\013\131\014\uffd4\017\uffd4\042\140\043" +
                            "\126\045\132\046\141\047\133\050\135\051\uffd4\052\uffd4" +
                            "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001" +
                            "\002\000\050\005\uffdc\012\uffdc\013\131\014\uffdc\017\uffdc" +
                            "\042\140\043\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
                            "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
                            "\060\uffdc\001\002\000\050\005\uffde\012\uffde\013\131\014" +
                            "\uffde\017\uffde\042\140\043\uffde\045\uffde\046\uffde\047\uffde" +
                            "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
                            "\uffde\057\uffde\060\uffde\001\002\000\042\013\131\014\165" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\052\005\uffdf\012\uffdf\013\uffdf\014" +
                            "\uffdf\017\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf" +
                            "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
                            "\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\050\005\uffd3" +
                            "\012\uffd3\013\131\014\uffd3\017\uffd3\042\140\043\126\045" +
                            "\132\046\141\047\133\050\135\051\143\052\137\053\136" +
                            "\054\134\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000" +
                            "\050\005\uffd9\012\uffd9\013\131\014\uffd9\017\uffd9\042\140" +
                            "\043\126\045\132\046\141\047\133\050\135\051\143\052" +
                            "\137\053\136\054\134\055\130\056\142\057\uffd9\060\uffd9" +
                            "\001\002\000\050\005\uffda\012\uffda\013\131\014\uffda\017" +
                            "\uffda\042\140\043\uffda\045\132\046\141\047\133\050\uffda" +
                            "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057" +
                            "\uffda\060\uffda\001\002\000\060\004\uffbe\011\uffbe\015\uffbe" +
                            "\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
                            "\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
                            "\035\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe\062" +
                            "\uffbe\001\002\000\032\004\054\022\114\023\060\024\055" +
                            "\034\057\035\065\037\064\040\103\041\067\043\052\044" +
                            "\050\062\046\001\002\000\042\005\174\013\131\042\140" +
                            "\043\126\045\132\046\141\047\133\050\135\051\143\052" +
                            "\137\053\136\054\134\055\130\056\142\057\127\060\144" +
                            "\001\002\000\054\004\054\011\025\015\062\020\017\021" +
                            "\022\022\100\023\060\024\055\025\056\030\063\031\077" +
                            "\032\070\033\051\034\057\035\065\037\064\040\103\041" +
                            "\067\043\052\044\050\062\046\001\002\000\060\004\uffc4" +
                            "\011\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
                            "\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
                            "\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\043" +
                            "\uffc4\044\uffc4\062\uffc4\001\002\000\020\007\ufff3\010\ufff3" +
                            "\011\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\001\002\000" +
                            "\056\004\uffca\011\uffca\015\uffca\016\uffca\020\uffca\021\uffca" +
                            "\022\uffca\023\uffca\024\uffca\025\uffca\030\uffca\031\uffca\032" +
                            "\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca" +
                            "\043\uffca\044\uffca\062\uffca\001\002\000\060\004\uffc3\011" +
                            "\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
                            "\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
                            "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3" +
                            "\044\uffc3\062\uffc3\001\002\000\004\013\205\001\002\000" +
                            "\006\004\203\013\uffe8\001\002\000\004\005\204\001\002" +
                            "\000\050\005\uffb8\012\uffb8\013\uffb8\014\uffb8\017\uffb8\042" +
                            "\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
                            "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
                            "\uffb8\001\002\000\034\004\054\014\034\022\114\023\060" +
                            "\024\055\034\057\035\065\037\064\040\103\041\067\043" +
                            "\052\044\050\062\046\001\002\000\042\013\131\014\207" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\050\005\uffb7\012\uffb7\013\uffb7\014" +
                            "\uffb7\017\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7" +
                            "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
                            "\uffb7\057\uffb7\060\uffb7\001\002\000\042\013\131\017\212" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\060\004\uffc7\011\uffc7\015\uffc7\016" +
                            "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
                            "\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
                            "\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\062\uffc7" +
                            "\001\002\000\060\004\uffc6\011\uffc6\015\uffc6\016\uffc6\020" +
                            "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
                            "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037" +
                            "\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\062\uffc6\001\002" +
                            "\000\056\004\054\011\025\015\062\016\215\020\017\021" +
                            "\022\022\100\023\060\024\055\025\056\030\063\031\077" +
                            "\032\070\033\051\034\057\035\065\037\064\040\103\041" +
                            "\067\043\052\044\050\062\046\001\002\000\060\004\uffc0" +
                            "\011\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
                            "\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0" +
                            "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\043" +
                            "\uffc0\044\uffc0\062\uffc0\001\002\000\060\004\uffc1\011\uffc1" +
                            "\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
                            "\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
                            "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044" +
                            "\uffc1\062\uffc1\001\002\000\034\004\054\005\uffce\022\114" +
                            "\023\060\024\055\034\057\035\065\037\064\040\103\041" +
                            "\067\043\052\044\050\062\046\001\002\000\004\005\220" +
                            "\001\002\000\050\005\uffe2\012\uffe2\013\uffe2\014\uffe2\017" +
                            "\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
                            "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
                            "\uffe2\060\uffe2\001\002\000\032\004\054\022\114\023\060" +
                            "\024\055\034\057\035\065\037\064\040\103\041\067\043" +
                            "\052\044\050\062\046\001\002\000\042\005\223\013\131" +
                            "\042\140\043\126\045\132\046\141\047\133\050\135\051" +
                            "\143\052\137\053\136\054\134\055\130\056\142\057\127" +
                            "\060\144\001\002\000\054\004\054\011\025\015\062\020" +
                            "\017\021\022\022\100\023\060\024\055\025\056\030\063" +
                            "\031\077\032\070\033\051\034\057\035\065\037\064\040" +
                            "\103\041\067\043\052\044\050\062\046\001\002\000\060" +
                            "\004\uffbd\011\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022" +
                            "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\225\030\uffbd\031\uffbd" +
                            "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041" +
                            "\uffbd\043\uffbd\044\uffbd\062\uffbd\001\002\000\054\004\054" +
                            "\011\025\015\062\020\017\021\022\022\100\023\060\024" +
                            "\055\025\056\030\063\031\077\032\070\033\051\034\057" +
                            "\035\065\037\064\040\103\041\067\043\052\044\050\062" +
                            "\046\001\002\000\060\004\uffbc\011\uffbc\015\uffbc\016\uffbc" +
                            "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
                            "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
                            "\037\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\062\uffbc\001" +
                            "\002\000\042\005\230\013\131\042\140\043\126\045\132" +
                            "\046\141\047\133\050\135\051\143\052\137\053\136\054" +
                            "\134\055\130\056\142\057\127\060\144\001\002\000\050" +
                            "\005\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0\042\uffb0\043" +
                            "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
                            "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\001" +
                            "\002\000\032\004\054\022\114\023\060\024\055\034\057" +
                            "\035\065\037\064\040\103\041\067\043\052\044\050\062" +
                            "\046\001\002\000\042\013\131\017\233\042\140\043\126" +
                            "\045\132\046\141\047\133\050\135\051\143\052\137\053" +
                            "\136\054\134\055\130\056\142\057\127\060\144\001\002" +
                            "\000\060\004\uffc9\011\uffc9\015\uffc9\016\uffc9\020\uffc9\021" +
                            "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9" +
                            "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040" +
                            "\uffc9\041\uffc9\043\uffc9\044\uffc9\062\uffc9\001\002\000\050" +
                            "\005\uffd1\012\uffd1\013\131\014\uffd1\017\uffd1\042\140\043" +
                            "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
                            "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\001" +
                            "\002\000\060\004\uffc2\011\uffc2\015\uffc2\016\uffc2\020\uffc2" +
                            "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030" +
                            "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2" +
                            "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\062\uffc2\001\002\000" +
                            "\050\005\uffd0\012\uffd0\013\131\014\uffd0\017\uffd0\042\140" +
                            "\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
                            "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
                            "\001\002\000\060\004\uffc8\011\uffc8\015\uffc8\016\uffc8\020" +
                            "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
                            "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037" +
                            "\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\062\uffc8\001\002" +
                            "\000\006\005\uffee\012\uffee\001\002\000\006\005\uffec\012" +
                            "\uffec\001\002\000\006\012\035\017\ufff7\001\002\000\004" +
                            "\017\ufff6\001\002\000\004\004\245\001\002\000\016\005" +
                            "\uffed\011\025\012\uffed\020\017\021\022\022\024\001\002" +
                            "\000\006\005\247\012\042\001\002\000\004\015\250\001" +
                            "\002\000\056\004\054\011\025\015\062\016\252\020\017" +
                            "\021\022\022\100\023\060\024\055\025\056\030\063\031" +
                            "\077\032\070\033\051\034\057\035\065\037\064\040\103" +
                            "\041\067\043\052\044\050\062\046\001\002\000\056\004" +
                            "\054\011\025\015\062\016\253\020\017\021\022\022\100" +
                            "\023\060\024\055\025\056\030\063\031\077\032\070\033" +
                            "\051\034\057\035\065\037\064\040\103\041\067\043\052" +
                            "\044\050\062\046\001\002\000\020\007\ufff0\010\ufff0\011" +
                            "\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\001\002\000\020" +
                            "\007\ufff1\010\ufff1\011\ufff1\016\ufff1\020\ufff1\021\ufff1\022" +
                            "\ufff1\001\002\000\006\013\031\023\256\001\002\000\020" +
                            "\007\ufff5\010\ufff5\011\ufff5\016\ufff5\020\ufff5\021\ufff5\022" +
                            "\ufff5\001\002\000\004\004\036\001\002\000\004\015\260" +
                            "\001\002\000\020\007\ufff9\010\ufff9\011\ufff9\016\ufff9\020" +
                            "\ufff9\021\ufff9\022\ufff9\001\002\000\020\007\020\010\023" +
                            "\011\025\016\262\020\017\021\022\022\024\001\002\000" +
                            "\006\002\ufffc\006\ufffc\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\260\000\006\002\004\003\003\001\001\000\004\004" +
                            "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\005\013\001\001\000\012\006\026\010\025" +
                            "\011\014\012\020\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\010\253\011\254\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\007\031\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\007\242\001\001\000\010\010\036\016\040\017\037\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\010\036\017\237\001\001\000\002\001\001\000" +
                            "\036\010\104\013\103\014\072\015\071\020\052\021\101" +
                            "\022\044\025\046\026\073\027\065\030\075\031\074\032" +
                            "\060\033\070\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\020\110\021\235\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\002\001\001\000\026\020\110\021\233\022" +
                            "\112\025\046\026\073\027\065\030\075\031\074\032\060" +
                            "\033\070\001\001\000\002\001\001\000\026\020\110\021" +
                            "\226\022\112\025\046\026\073\027\065\030\075\031\074" +
                            "\032\060\033\070\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\036\010\104\013\103\014\072\015\212\020\052\021" +
                            "\101\022\044\025\046\026\073\027\065\030\075\031\074" +
                            "\032\060\033\070\001\001\000\026\020\110\021\207\022" +
                            "\112\025\046\026\073\027\065\030\075\031\074\032\060" +
                            "\033\070\001\001\000\002\001\001\000\004\010\200\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\034\010\104\013\176\014\072\020" +
                            "\052\021\101\022\044\025\046\026\073\027\065\030\075" +
                            "\031\074\032\060\033\070\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\020\110\021\111\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\032\020\110\021\117\022\112\023" +
                            "\121\024\120\025\046\026\073\027\065\030\075\031\074" +
                            "\032\060\033\070\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\026\020\110" +
                            "\021\124\022\112\025\046\026\073\027\065\030\075\031" +
                            "\074\032\060\033\070\001\001\000\002\001\001\000\026" +
                            "\020\110\021\167\022\112\025\046\026\073\027\065\030" +
                            "\075\031\074\032\060\033\070\001\001\000\026\020\110" +
                            "\021\166\022\112\025\046\026\073\027\065\030\075\031" +
                            "\074\032\060\033\070\001\001\000\026\020\110\021\165" +
                            "\022\112\025\046\026\073\027\065\030\075\031\074\032" +
                            "\060\033\070\001\001\000\026\020\110\021\163\022\112" +
                            "\025\046\026\073\027\065\030\075\031\074\032\060\033" +
                            "\070\001\001\000\026\020\110\021\162\022\112\025\046" +
                            "\026\073\027\065\030\075\031\074\032\060\033\070\001" +
                            "\001\000\026\020\110\021\161\022\112\025\046\026\073" +
                            "\027\065\030\075\031\074\032\060\033\070\001\001\000" +
                            "\026\020\110\021\160\022\112\025\046\026\073\027\065" +
                            "\030\075\031\074\032\060\033\070\001\001\000\026\020" +
                            "\110\021\157\022\112\025\046\026\073\027\065\030\075" +
                            "\031\074\032\060\033\070\001\001\000\026\020\110\021" +
                            "\156\022\112\025\046\026\073\027\065\030\075\031\074" +
                            "\032\060\033\070\001\001\000\026\020\110\021\155\022" +
                            "\112\025\046\026\073\027\065\030\075\031\074\032\060" +
                            "\033\070\001\001\000\002\001\001\000\026\020\110\021" +
                            "\147\022\112\025\046\026\073\027\065\030\075\031\074" +
                            "\032\060\033\070\001\001\000\026\020\110\021\146\022" +
                            "\112\025\046\026\073\027\065\030\075\031\074\032\060" +
                            "\033\070\001\001\000\026\020\110\021\145\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\026\020\110\021\144\022\112\025\046\026" +
                            "\073\027\065\030\075\031\074\032\060\033\070\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
                            "\020\110\021\117\022\112\023\153\024\120\025\046\026" +
                            "\073\027\065\030\075\031\074\032\060\033\070\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\020\110\021\172\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\002\001\001\000\034\010\104\013\174\014" +
                            "\072\020\052\021\101\022\044\025\046\026\073\027\065" +
                            "\030\075\031\074\032\060\033\070\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\026\020\110\021\205\022\112\025\046" +
                            "\026\073\027\065\030\075\031\074\032\060\033\070\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\034\010\104\013" +
                            "\176\014\072\020\052\021\101\022\044\025\046\026\073" +
                            "\027\065\030\075\031\074\032\060\033\070\001\001\000" +
                            "\002\001\001\000\002\001\001\000\032\020\110\021\117" +
                            "\022\112\023\216\024\120\025\046\026\073\027\065\030" +
                            "\075\031\074\032\060\033\070\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\020\110\021\221\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\002\001\001\000\034\010\104\013\223\014" +
                            "\072\020\052\021\101\022\044\025\046\026\073\027\065" +
                            "\030\075\031\074\032\060\033\070\001\001\000\002\001" +
                            "\001\000\034\010\104\013\225\014\072\020\052\021\101" +
                            "\022\044\025\046\026\073\027\065\030\075\031\074\032" +
                            "\060\033\070\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\026\020\110\021\231\022\112\025" +
                            "\046\026\073\027\065\030\075\031\074\032\060\033\070" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\010\036\016\245" +
                            "\017\037\001\001\000\002\001\001\000\002\001\001\000" +
                            "\036\010\104\013\103\014\072\015\250\020\052\021\101" +
                            "\022\044\025\046\026\073\027\065\030\075\031\074\032" +
                            "\060\033\070\001\001\000\034\010\104\013\176\014\072" +
                            "\020\052\021\101\022\044\025\046\026\073\027\065\030" +
                            "\075\031\074\032\060\033\070\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\005\260\001\001" +
                            "\000\012\006\026\010\025\011\014\012\020\001\001\000" +
                            "\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
    /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}



    public void report_fatal_error(String message, Object info) throws SyntaxError {
        throw new SyntaxError();
    }

    public void syntax_error(Symbol cur_token) {
        int i = 0;
        expected_token_ids();
        expected_token_ids();
        expected_token_ids();
        List<Integer> lst = expected_token_ids();

        Token k = (Token) cur_token;
        System.err.print(k.left + ":" + k.right + " : syntax error; found \"" + k.getTagString() + "\", expected: ");
        for (i = 0; i < lst.size(); i++)
            System.err.print(" '"+ symbl_name_from_id(lst.get(i)) + "'");
        System.err.println("");
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {
        private final parser parser;

        /** Constructor */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
      /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
            switch (CUP$parser$act_num)
            {
          /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // program ::= classDecl_list
                {
                    Program RESULT =null;
                    int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    List<ICClass> pl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Program(pl);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= program EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
          /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // classDecl_list ::= classDecl_list classDecl
                {
                    List<ICClass> RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<ICClass> l = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    ICClass cl = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    l.add(cl);
                    RESULT = l;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // classDecl_list ::=
                {
                    List<ICClass> RESULT =null;
                    RESULT = new LinkedList<ICClass>();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // classDecl ::= CLASS CLASS_ID LCP field_method_list RCP
                {
                    ICClass RESULT =null;
                    int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String ci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    FieldMethodLists fm = (FieldMethodLists)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new ICClass(cileft, ci, fm.getField_list(), fm.getMethod_list());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCP field_method_list RCP
                {
                    ICClass RESULT =null;
                    int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    String ci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int ci2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int ci2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String ci2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    FieldMethodLists fm = (FieldMethodLists)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new ICClass(cileft, ci, ci2, fm.getField_list(), fm.getMethod_list());;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // field_method_list ::= field_method_list field_type
                {
                    FieldMethodLists RESULT =null;
                    int fmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int fmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    FieldMethodLists fml = (FieldMethodLists)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    FieldMethodLists fm = (FieldMethodLists)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    fml.getField_list().addAll(fm.getField_list());
                    RESULT = fml;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_method_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // field_method_list ::= field_method_list stat_method
                {
                    FieldMethodLists RESULT =null;
                    int fmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int fmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    FieldMethodLists fml = (FieldMethodLists)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Method fm = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    fml.addMethod(fm);
                    RESULT = fml;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_method_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // field_method_list ::=
                {
                    FieldMethodLists RESULT =null;
                    RESULT = new FieldMethodLists();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_method_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // field_type ::= type field_list SEMICOL
                {
                    FieldMethodLists RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    LinkedList<String> fl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    RESULT = new FieldMethodLists();

                    for (String s: fl) {
                        RESULT.addField(new Field(t, s));
                    }

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // field_list ::= ID
                {
                    LinkedList<String> RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    RESULT = new LinkedList<String>();
                    RESULT.add(i);

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // field_list ::= ID COL field_list
                {
                    LinkedList<String> RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    LinkedList<String> fl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    fl.add(i);
                    RESULT = fl;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // stat_method ::= STATIC method
                {
                    Method RESULT =null;
                    int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    RESULT = new StaticMethod(m.getType(), m.getName(), m.getFormals(), m.getStatements());

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_method",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // stat_method ::= method
                {
                    Method RESULT =null;
                    int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = m;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_method",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // method ::= type ID LP formals RP LCP stmt_list RCP
                {
                    Method RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new VirtualMethod(t, i, f, s);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // method ::= type ID LP formals RP LCP RCP
                {
                    Method RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    RESULT = new VirtualMethod(t, i, f, new LinkedList<Statement>());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // method ::= VOID ID LP formals RP LCP stmt_list RCP
                {
                    Method RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new VirtualMethod(new PrimitiveType(ileft, DataTypes.VOID), i, f, s);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // method ::= VOID ID LP formals RP LCP RCP
                {
                    Method RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    RESULT = new VirtualMethod(new PrimitiveType(ileft, DataTypes.VOID), i, f, new LinkedList<Statement>());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // formals ::= formals_main
                {
                    List<Formal> RESULT =null;
                    int frmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int frmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Formal frml = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    List<Formal> frmllist = new LinkedList<Formal>();
                    frmllist.add(frml);
                    RESULT = frmllist;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // formals ::= formals COL formals_main
                {
                    List<Formal> RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    List<Formal> i0 = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Formal i1 = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    i0.add(i1);
                    RESULT = i0;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // formals ::=
                {
                    List<Formal> RESULT =null;
                    RESULT = new LinkedList<Formal>();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // formals_main ::= type ID
                {
                    Formal RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Type i0 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Formal(i0, i1);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("formals_main",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // type ::= INT
                {
                    Type RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object i0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new PrimitiveType(i0left, DataTypes.INT);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // type ::= BOOLEAN
                {
                    Type RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object i0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new PrimitiveType(i0left, DataTypes.BOOLEAN);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // type ::= STRING
                {
                    Type RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object i0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new PrimitiveType(i0left, DataTypes.STRING);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // type ::= CLASS_ID
                {
                    Type RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String i0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new UserType(i0left, i0);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // type ::= type LSP RSP
                {
                    Type RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Type i0 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    i0.incrementDimension();
                    RESULT = i0;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // call ::= static_call
                {
                    Call RESULT =null;
                    int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    StaticCall sc = (StaticCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = sc;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // call ::= virtual_call
                {
                    Call RESULT =null;
                    int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    VirtualCall vc = (VirtualCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = vc;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // static_call ::= CLASS_ID DOT ID LP expr_list RP
                {
                    StaticCall RESULT =null;
                    int i0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int i0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    String i0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new StaticCall(i0left, i0, i1, el);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("static_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // virtual_call ::= expr DOT ID LP expr_list RP
                {
                    VirtualCall RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new VirtualCall(eleft, e, i, el);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // virtual_call ::= ID LP expr_list RP
                {
                    VirtualCall RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new VirtualCall(ileft, i, el);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // location ::= ID
                {
                    Location RESULT =null;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new VariableLocation(ileft, i);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // location ::= expr DOT ID
                {
                    Location RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new VariableLocation(ileft, e, i);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // location ::= expr LSP expr RSP
                {
                    Location RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new ArrayLocation(e1, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // bin_op_math ::= expr MULTI expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_math",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // bin_op_math ::= expr DIV expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_math",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // bin_op_math ::= expr MOD expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_math",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // bin_op_math ::= expr PLUS expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_math",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // bin_op_math ::= expr MINUS expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_math",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // bin_op_logic ::= expr AND expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // bin_op_logic ::= expr OR expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // bin_op_logic ::= expr LT expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // bin_op_logic ::= expr LE expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // bin_op_logic ::= expr GT expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // bin_op_logic ::= expr GE expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // bin_op_logic ::= expr EQEQ expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // bin_op_logic ::= expr NE expr
                {
                    BinaryOp RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op_logic",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // un_op ::= MINUS expr
                {
                    UnaryOp RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new MathUnaryOp(UnaryOps.UMINUS, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("un_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // un_op ::= EXCLAM expr
                {
                    UnaryOp RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new LogicalUnaryOp(UnaryOps.LNEG, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("un_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // expr_list ::= expr_col
                {
                    List<Expression> RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    List<Expression> e = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // expr_list ::=
                {
                    List<Expression> RESULT =null;
                    RESULT = new LinkedList<Expression>();
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // expr_col ::= expr
                {
                    List<Expression> RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    RESULT = new LinkedList<Expression>();
                    RESULT.add(e);

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_col",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // expr_col ::= expr_col COL expr
                {
                    List<Expression> RESULT =null;
                    int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    List<Expression> ec = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    ec.add(e);
                    RESULT = ec;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_col",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // stmt_list ::= stmt
                {
                    List<Statement> RESULT =null;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    RESULT = new LinkedList<Statement>();
                    RESULT.add(s);

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // stmt_list ::= stmt_list stmt
                {
                    List<Statement> RESULT =null;
                    int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    sl.add(s);
                    RESULT = sl;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // stmt ::= location EQ expr SEMICOL
                {
                    Statement RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new Assignment(l, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // stmt ::= call SEMICOL
                {
                    Statement RESULT =null;
                    int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new CallStatement(c);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // stmt ::= RETURN SEMICOL
                {
                    Statement RESULT =null;
                    int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new Return(rleft);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // stmt ::= RETURN expr SEMICOL
                {
                    Statement RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new Return(eleft, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // stmt ::= if
                {
                    Statement RESULT =null;
                    int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = f;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // stmt ::= WHILE LP expr RP stmt
                {
                    Statement RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new While(e, s);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // stmt ::= BREAK SEMICOL
                {
                    Statement RESULT =null;
                    int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new Break(bleft);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // stmt ::= CONTINUE SEMICOL
                {
                    Statement RESULT =null;
                    int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new Continue(cleft);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // stmt ::= LCP stmt_list RCP
                {
                    Statement RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new StatementsBlock(lleft, sl);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // stmt ::= LCP RCP
                {
                    Statement RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new StatementsBlock(lleft, new LinkedList<Statement>());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // stmt ::= type ID SEMICOL
                {
                    Statement RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new LocalVariable(t, i);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // stmt ::= type ID EQ expr SEMICOL
                {
                    Statement RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new LocalVariable(t, i, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // if ::= IF LP expr RP stmt
                {
                    Statement RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new If(e, s);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // if ::= IF LP expr RP stmt ELSE stmt
                {
                    Statement RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new If(e, s1, s2);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // expr ::= location
                {
                    Expression RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = l;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // expr ::= call
                {
                    Expression RESULT =null;
                    int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = c;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // expr ::= THIS
                {
                    Expression RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new This(tleft);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // expr ::= NEW CLASS_ID LP RP
                {
                    Expression RESULT =null;
                    int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    String ci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    RESULT = new NewClass(cileft, ci);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // expr ::= NEW type LSP expr RSP
                {
                    Expression RESULT =null;
                    int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new NewArray(t, e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // expr ::= expr DOT LENGTH
                {
                    Expression RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    RESULT = new Length(e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // expr ::= bin_op_math
                {
                    Expression RESULT =null;
                    int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    BinaryOp b = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = b;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // expr ::= bin_op_logic
                {
                    Expression RESULT =null;
                    int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    BinaryOp b = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = b;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // expr ::= un_op
                {
                    Expression RESULT =null;
                    int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    UnaryOp o = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = o;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // expr ::= literal_ter
                {
                    Expression RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = l;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // expr ::= literal_val
                {
                    Expression RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = l;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // expr ::= LP expr RP
                {
                    Expression RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = new ExpressionBlock(e);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // literal_ter ::= TRUE
                {
                    Literal RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Literal(lleft, LiteralTypes.TRUE);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_ter",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // literal_ter ::= FALSE
                {
                    Literal RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Literal(lleft, LiteralTypes.FALSE);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_ter",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // literal_ter ::= NULL
                {
                    Literal RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Literal(lleft, LiteralTypes.NULL);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_ter",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // literal_val ::= NUM
                {
                    Literal RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    int i;
                    try {
                        i = Integer.parseInt((String) l);
                    } catch (Exception e) {
                        System.err.println(lleft + ":" + lright + ": syntax error; found \"" + l + "\", integer out of bound.");
                        throw new SyntaxError();
                    }
                    RESULT = new Literal(lleft, LiteralTypes.INTEGER, i + "");

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_val",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // literal_val ::= STRING_LITERAL
                {
                    Literal RESULT =null;
                    int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = new Literal(lleft, LiteralTypes.STRING, l);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_val",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

          /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
